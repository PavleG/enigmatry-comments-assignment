// <auto-generated />
using System;
using Enigmatry.Blueprint.Infrastructure.Data.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Enigmatry.Blueprint.Data.Migrations.Migrations
{
    [DbContext(typeof(BlueprintContext))]
    partial class BlueprintContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Enigmatry.Blueprint.Model.Identity.User", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid?>("CreatedById")
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTimeOffset>("CreatedOn")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(200)")
                    .HasMaxLength(200);

                b.Property<Guid?>("UpdatedById")
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTimeOffset>("UpdatedOn")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("UserName")
                    .IsRequired()
                    .HasColumnType("nvarchar(200)")
                    .HasMaxLength(200);

                b.HasKey("Id");

                b.HasIndex("CreatedById");

                b.HasIndex("UpdatedById");

                b.HasIndex("UserName")
                    .IsUnique();

                b.ToTable("User");

                b.HasData(
                    new
                    {
                        Id = new Guid("8207db25-94d1-4f3d-bf18-90da283221f7"),
                        CreatedOn = new DateTimeOffset(new DateTime(2019, 5, 6, 14, 31, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                        Name = "Test",
                        UpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                        UserName = "Test"
                    });
            });

            modelBuilder.Entity("Enigmatry.BuildingBlocks.IntegrationEventLogEF.IntegrationEventLogEntry", b =>
            {
                b.Property<Guid>("EventId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("Content")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("CreationTime")
                    .HasColumnType("datetime2");

                b.Property<string>("EventTypeName")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("State")
                    .HasColumnType("int");

                b.Property<int>("TimesSent")
                    .HasColumnType("int");

                b.HasKey("EventId");

                b.ToTable("IntegrationEventLog");
            });

            modelBuilder.Entity("Enigmatry.Blueprint.Model.Identity.User", b =>
            {
                b.HasOne("Enigmatry.Blueprint.Model.Identity.User", "CreatedBy")
                    .WithMany("CreatedUsers")
                    .HasForeignKey("CreatedById");

                b.HasOne("Enigmatry.Blueprint.Model.Identity.User", "UpdatedBy")
                    .WithMany("UpdatedUsers")
                    .HasForeignKey("UpdatedById");
            });
#pragma warning restore 612, 618
        }
    }
}
