// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------;
import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { FormlyFieldConfig } from '@ngx-formly/core';
import { IGetProductDetailsResponse } from 'src/app/api/api-reference';
import { map } from 'rxjs/operators';
import { ProductEditLookupService } from '../services/product-edit-generated-lookup.service';
import { ProductCodeUniquenessValidator, PhoneNumberValidator } from 'src/app/shared/validators/custom-validators';
@Component({
  selector: 'app-g-product-edit',
  templateUrl: './product-edit-generated.component.html',
  styleUrls: ['./product-edit-generated.component.scss']
})
export class ProductEditGeneratedComponent implements OnInit {

  @Input() model: IGetProductDetailsResponse = {};

  @Output() save = new EventEmitter<IGetProductDetailsResponse>();
  @Output() cancel = new EventEmitter<void>();

  form = new FormGroup({});
  fields: FormlyFieldConfig[] = [];

  constructor(private lookupService: ProductEditLookupService) {
    this.fields = [     {
        key: 'name',
        type: 'input',
        templateOptions: {
          label: 'Name',
          placeholder: 'Product name',
          readonly: false,
          description: '',
          hidden: !true,
required: true,
maxLength: 200,
        },
        validation: {
          messages: {
required: 'Name is required',
maxLength: 'Name should have less then 200 characters'
          }
        },
     },
     {
        key: 'code',
        type: 'input',
        templateOptions: {
          label: 'Code',
          placeholder: 'Unique product identifier',
          readonly: false,
          description: '',
          hidden: !true,
required: true,
pattern: /^[A-Z]{4}[1-9]{8}$/mu,
        },
        validation: {
          messages: {
required: 'Code is required',
pattern: 'Code must be in 4 letter 8 digits format (e.g. ABCD12345678)'
          }
        },
asyncValidators: { code: { expression: ProductCodeUniquenessValidator, message: 'Code is not unique' } },     },
     {
        key: 'type',
        type: 'select',
        templateOptions: {
          label: 'Type',
          placeholder: 'Type',
          readonly: false,
          description: '',
          options: lookupService.getType$.pipe(
            map((arr) =>
              arr.map(el => el = {value: el.value, label: el.displayName}))
            ),
          hidden: !true,
required: true,
        },
        validation: {
          messages: {
required: 'Type is required'
          }
        },
     },
     {
        key: 'price',
        type: 'input',
        templateOptions: {
          label: 'Price',
          placeholder: 'Product price',
          readonly: false,
          description: '',
          hidden: !true,
type: 'number',
required: true,
min: 0,
        },
        validation: {
          messages: {
required: 'Price is required',
min: 'Price should be more then 0'
          }
        },
     },
     {
        key: 'contactEmail',
        type: 'input',
        templateOptions: {
          label: 'Contact email',
          placeholder: 'Contact person email address',
          readonly: false,
          description: '',
          hidden: !true,
required: true,
pattern: /^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/,
        },
        validation: {
          messages: {
required: 'ContactEmail is required',
pattern: 'ContactEmail is not in correct email address format'
          }
        },
     },
     {
        key: 'contactPhone',
        type: 'input',
        templateOptions: {
          label: 'Contact phone',
          placeholder: 'Contact person phone number',
          readonly: false,
          description: '',
          hidden: !true,
required: true,
        },
        validation: {
          messages: {
required: 'ContactPhone is required'
          }
        },
validators: { contactPhone: { expression: PhoneNumberValidator, message: 'PhoneNumberValidator validator condition is not meet' } },     },
     {
        key: 'expiresOn',
        type: 'datepicker',
        templateOptions: {
          label: 'Expires on',
          placeholder: 'Product expiration date if any',
          readonly: false,
          description: '',
          hidden: !true,
        },
     },
];
 }

  ngOnInit(): void {
  }

  onSubmit() {
    if (this.form.valid) {
      this.save.emit(this.model);
    }
  }
}
