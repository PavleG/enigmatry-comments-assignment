// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------;
/* eslint-disable */
import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output, TemplateRef, ViewChild } from '@angular/core';
import { CellTemplate, ColumnDef, ContextMenuItem, RowContextMenuFormatter } from '@enigmatry/angular-building-blocks/enigmatry-grid';
import { PagedData, PageEvent, SortDirection, SortEvent } from '@enigmatry/angular-building-blocks/pagination';

import { GetProductsResponseItem } from 'src/app/api/api-reference';

@Component({
  selector: 'app-g-product-list',
  templateUrl: './product-list-generated.component.html',
  styleUrls: ['./product-list-generated.component.scss'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class ProductListGeneratedComponent implements OnInit {

  @Input() data: PagedData<GetProductsResponseItem> | null;
  @Input() loading: boolean;

  @Input() showPaginator = true;
  @Input() showFirstLastButtons = true;
  @Input() pageSizeOptions = [2, 5, 10, 25, 50];
  @Input() hidePageSize = !true;

  @Input() defaultSort: { sortBy?: string | undefined, sortDirection?: SortDirection } = { };

  @Input() rowSelectable = false;
  @Input() multiSelectable = false;
  @Input() showSelectAllCheckbox = true;

  @Input() headerTemplate: TemplateRef<any> | CellTemplate;
  @Input() cellTemplate: TemplateRef<any> | CellTemplate;

  @Input() showContextMenu = true;
  @Input() contextMenuItems: ContextMenuItem[] = [];
  @Input() rowContextMenuFormatter: RowContextMenuFormatter;

  @Input() columns: ColumnDef[] = [];

  @Output() pageChange = new EventEmitter<PageEvent>();
  @Output() sortChange = new EventEmitter<SortEvent>();
  @Output() selectionChange = new EventEmitter<GetProductsResponseItem[]>();
  @Output() contextMenuItemSelected = new EventEmitter<{ itemId: string; rowData: GetProductsResponseItem }>();
  @Output() rowClick = new EventEmitter<GetProductsResponseItem>();

@ViewChild('nameTpl', { static: true }) nameTpl: TemplateRef<any>;
@ViewChild('typeTpl', { static: true }) typeTpl: TemplateRef<any>;

  constructor() { }

  ngOnInit(): void {
    this.columns = [
{ field: 'id', hide: true, sortable: true },
{ field: 'name', header: 'Product name', hide: false, sortable: true, cellTemplate: this.nameTpl },
{ field: 'code', header: 'Code', hide: false, sortable: true },
{ field: 'type', header: 'Type', hide: false, sortable: true, cellTemplate: this.typeTpl },
{ field: 'price', header: 'Price per unit', hide: false, sortable: true, type: 'currency', typeParameter: { name: 'currency', currencyCode: 'EUR', display: 'â‚¬', digitsInfo: '', locale: '' }, class: 'products-price' },
{ field: 'amount', header: 'Units', hide: false, sortable: true },
{ field: 'contactEmail', header: 'Contact email', hide: false, sortable: true },
{ field: 'contactPhone', header: 'Contact phone', hide: false, sortable: true },
{ field: 'infoLink', hide: true, sortable: true },
{ field: 'expiresOn', header: 'Expires on', hide: false, sortable: true, type: 'date', typeParameter: { name: 'date' } },
{ field: 'freeShipping', header: 'Free shipping', hide: false, sortable: true, type: 'boolean', typeParameter: { name: 'boolean' } },
{ field: 'hasDiscount', hide: true, sortable: true, type: 'boolean', typeParameter: { name: 'boolean' } },
{ field: 'discount', hide: true, sortable: true, type: 'number', typeParameter: { name: 'number' } }
];
    this.contextMenuItems = [];
  }
}
