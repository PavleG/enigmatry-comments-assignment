// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------;
import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { FormlyFieldConfig } from '@ngx-formly/core';
import { IGetUserDetailsResponse } from 'src/app/api/api-reference';

@Component({
  selector: 'app-g-user-edit',
  templateUrl: './user-edit-generated.component.html',
  styleUrls: ['./user-edit-generated.component.scss']
})
export class UserEditGeneratedComponent implements OnInit {

  @Input() model: IGetUserDetailsResponse = {};

  @Output() save = new EventEmitter<IGetUserDetailsResponse>();
  @Output() cancel = new EventEmitter<void>();

  form = new FormGroup({});
  fields: FormlyFieldConfig[] = [];

  constructor() {
    this.fields = [     {
        key: 'userName',
        type: 'input',
        templateOptions: {
          label: 'User name',
          placeholder: 'User name',
          readonly: true,
          hidden: !true
        }
      },
     {
        key: 'name',
        type: 'input',
        templateOptions: {
          label: 'Name',
          placeholder: 'Name',
          readonly: false,
          hidden: !true
        }
      },
     {
        key: 'createdOn',
        type: 'datepicker',
        templateOptions: {
          label: 'Created on',
          placeholder: 'Created on',
          readonly: true,
          hidden: !true
        }
      },
     {
        key: 'updatedOn',
        type: 'datepicker',
        templateOptions: {
          label: 'Updated on',
          placeholder: 'Updated on',
          readonly: true,
          hidden: !true
        }
      },
];
 }

  ngOnInit(): void {
  }

  onSubmit() {
    if (this.form.valid) {
      this.save.emit(this.model);
    }
  }
}
